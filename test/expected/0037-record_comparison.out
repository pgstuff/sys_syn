BEGIN;
CREATE EXTENSION tinyint
    SCHEMA public;
CREATE EXTENSION sys_syn;
CREATE SCHEMA user_data
    AUTHORIZATION postgres;
CREATE TABLE user_data.test_table (
        test_table_key          integer NOT NULL,
        test_table_text         text,
        test_table_int          integer,
        test_table_other        text,
        CONSTRAINT test_table_pkey PRIMARY KEY (test_table_key));
INSERT INTO sys_syn.in_groups_def VALUES ('in');
SELECT sys_syn.in_table_add_sql('user_data.test_table'::regclass, 'in');
                                            in_table_add_sql                                             
---------------------------------------------------------------------------------------------------------
 SELECT sys_syn.in_table_add (                                                                          +
                 schema          => 'user_data',                                                        +
                 in_table_id     => 'test_table',                                                       +
                 in_group_id     => 'in',                                                               +
                 in_pull_id      => NULL,                                                               +
                 in_columns      => ARRAY[                                                              +
                        $COL$("test_table_key","integer",Key,"in_source.test_table_key",,,,)$COL$,      +
                        $COL$("test_table_text","text",Attribute,"in_source.test_table_text",,,,)$COL$, +
                        $COL$("test_table_int","integer",Attribute,"in_source.test_table_int",,,,)$COL$,+
                        $COL$("test_table_other","text",Attribute,"in_source.test_table_other",,,,)$COL$+
                 ]::sys_syn.create_in_column[],                                                         +
                 full_table_reference    => 'user_data.test_table',                                     +
                 changes_table_reference => NULL,                                                       +
                 full_sql                => NULL,                                                       +
                 changes_sql             => NULL,                                                       +
                 full_pre_sql            => NULL,                                                       +
                 changes_pre_sql         => NULL,                                                       +
                 full_post_sql           => NULL,                                                       +
                 changes_post_sql        => NULL,                                                       +
                 enable_deletes_implied  => TRUE,                                                       +
                 full_prepull_id         => NULL,                                                       +
                 changes_prepull_id      => NULL                                                        +
         );
(1 row)

DO $$BEGIN
        EXECUTE sys_syn.in_table_add_sql('user_data.test_table'::regclass, 'in');
END$$;
CREATE FUNCTION user_data.test_table_out_record_comparison(
        left_key                user_data.test_table_in_key,
        left_attributes         user_data.test_table_in_attributes,
        left_no_diff            user_data.test_table_in_no_diff,
        right_attributes        user_data.test_table_in_attributes,
        right_no_diff           user_data.test_table_in_no_diff--,
        --attributes_different    boolean
        )
        RETURNS boolean AS
$BODY$
DECLARE
        _different BOOLEAN;
BEGIN
        _different =
                (
                        -- Normally, you would want case changes to go through.  But if the text ends up in all upper or lower case,
                        -- the following comparison might be useful to reduce unnecessary deltas.
                        COALESCE(LOWER(left_attributes.test_table_text), '')  !=
                        COALESCE(LOWER(right_attributes.test_table_text), '')
                ) OR (
                        left_attributes.test_table_int IS DISTINCT FROM
                        right_attributes.test_table_int
                ) OR (
                        row(left_attributes.test_table_other)::record *<>
                        row(right_attributes.test_table_other)::record
                );

        -- For citext, you must cast both values to text in order to use the standard equality operations:
        --      'test'::citext::text IS DISTINCT FROM 'Test'::citext::text
        -- For other data types that can have different representations for the same equality, use internal binary representation:
        --      row('test'::citext)::record *<> row('Test'::citext)::record

        IF _different IS NULL THEN
                RAISE EXCEPTION
                        'The _different result in user_data.test_table_out_record_comparison is NULL when testing record %.',
                        left_key::text
                USING HINT = 'Make sure that the expression is using COALESCE, IS [NOT] DISTINCT FROM, or row()::record *=/*<>.';
        END IF;

        --IF attributes_different THEN
                RETURN _different;
        --ELSE
        --        RETURN NOT _different;
        --END IF;
END;
$BODY$
        LANGUAGE plpgsql VOLATILE
        COST 20;
ALTER FUNCTION user_data.test_table_out_record_comparison(
        left_key                user_data.test_table_in_key,
        left_attributes         user_data.test_table_in_attributes,
        left_no_diff            user_data.test_table_in_no_diff,
        right_attributes        user_data.test_table_in_attributes,
        right_no_diff           user_data.test_table_in_no_diff--,
        --attributes_different    boolean
        )
        OWNER TO postgres;
INSERT INTO user_data.test_table(
        test_table_key, test_table_text)
VALUES (1,              'test_data v1');
INSERT INTO sys_syn.out_groups_def VALUES ('out');
SELECT sys_syn.out_table_add('user_data', 'test_table', 'out',
        --record_comparison_same          =>
        --        'NOT user_data.test_table_out_record_comparison(%1.key, %1.attributes, %1.no_diff, %2.attributes, %2.no_diff)',
        record_comparison_different     =>
                'user_data.test_table_out_record_comparison(%1.key, %1.attributes, %1.no_diff, %2.attributes, %2.no_diff)');
 out_table_add 
---------------
 
(1 row)

SELECT user_data.test_table_pull(FALSE);
 test_table_pull 
-----------------
 t
(1 row)

SELECT user_data.test_table_out_move();
 test_table_out_move 
---------------------
 t
(1 row)

SELECT  test_table_out_queue.key
FROM    user_data.test_table_out_queue;
 key 
-----
 (1)
(1 row)

UPDATE user_data.test_table_out_queue SET queue_state = 'Processed'::sys_syn.queue_state WHERE (key).test_table_key = 1;
SELECT user_data.test_table_out_processed();
 test_table_out_processed 
--------------------------
 t
(1 row)

SELECT  out_baseline.key,
        (in_data.key).*,
        (in_data.attributes).*
FROM    user_data.test_table_out_baseline out_baseline
        LEFT JOIN user_data.test_table_in AS in_data USING (trans_id_in, key);
 key | test_table_key | test_table_text | test_table_int | test_table_other 
-----+----------------+-----------------+----------------+------------------
 (1) |              1 | test_data v1    |                | 
(1 row)

UPDATE user_data.test_table SET test_table_text = 'TEST_DATA v1' WHERE test_table_key = 1;
UPDATE sys_syn.trans_id_mod SET trans_id_mod = trans_id_mod + 1;
SELECT user_data.test_table_pull(FALSE);
 test_table_pull 
-----------------
 t
(1 row)

SELECT user_data.test_table_out_move();
 test_table_out_move 
---------------------
 f
(1 row)

SELECT  test_table_out_queue.key
FROM    user_data.test_table_out_queue;
 key 
-----
(0 rows)

UPDATE user_data.test_table SET test_table_text = 'Test_Data v2' WHERE test_table_key = 1;
UPDATE sys_syn.trans_id_mod SET trans_id_mod = trans_id_mod + 1;
SELECT user_data.test_table_pull(FALSE);
 test_table_pull 
-----------------
 t
(1 row)

SELECT user_data.test_table_out_move();
 test_table_out_move 
---------------------
 t
(1 row)

SELECT  test_table_out_queue.key
FROM    user_data.test_table_out_queue;
 key 
-----
 (1)
(1 row)

UPDATE user_data.test_table_out_queue SET queue_state = 'Processed'::sys_syn.queue_state WHERE (key).test_table_key = 1;
SELECT user_data.test_table_out_processed();
 test_table_out_processed 
--------------------------
 t
(1 row)

SELECT  out_baseline.key,
        (in_data.key).*,
        (in_data.attributes).*
FROM    user_data.test_table_out_baseline out_baseline
        LEFT JOIN user_data.test_table_in AS in_data USING (trans_id_in, key);
 key | test_table_key | test_table_text | test_table_int | test_table_other 
-----+----------------+-----------------+----------------+------------------
 (1) |              1 | Test_Data v2    |                | 
(1 row)

ROLLBACK;
