BEGIN;
CREATE EXTENSION tinyint SCHEMA public;
CREATE EXTENSION pgcrypto SCHEMA public;
CREATE EXTENSION sys_syn;
CREATE SCHEMA user_data
    AUTHORIZATION postgres;
CREATE TABLE user_data.test_table (
        test_table_id integer NOT NULL,
        test_table_text text,
        CONSTRAINT test_table_pid PRIMARY KEY (test_table_id));
INSERT INTO sys_syn.in_groups_def VALUES ('in');
SELECT sys_syn.in_table_create_sql(
        'user_data.test_table'::regclass,
        'in',
        in_partitions => ARRAY[
                ('',NULL),
                ('',NULL),
                ('',NULL),
                ('',NULL)]::sys_syn.create_in_partition[]
);
                                          in_table_create_sql                                           
--------------------------------------------------------------------------------------------------------
 SELECT  sys_syn.in_table_create(                                                                      +
                 schema          => 'user_data'::regnamespace,                                         +
                 in_table_id     => 'test_table',                                                      +
                 in_group_id     => 'in',                                                              +
                 in_pull_id      => NULL,                                                              +
                 in_columns      => ARRAY[                                                             +
                        $COL$("test_table_id","integer",Id,"in_source.test_table_id",,,,,)$COL$,       +
                        $COL$("test_table_text","text",Attribute,"in_source.test_table_text",,,,,)$COL$+
                 ]::sys_syn.create_in_column[],                                                        +
                 full_table_reference    => 'user_data.test_table',                                    +
                 changes_table_reference => NULL,                                                      +
                 full_sql                => NULL,                                                      +
                 changes_sql             => NULL,                                                      +
                 full_pre_sql            => NULL,                                                      +
                 changes_pre_sql         => NULL,                                                      +
                 full_post_sql           => NULL,                                                      +
                 changes_post_sql        => NULL,                                                      +
                 enable_deletes_implied  => TRUE,                                                      +
                 full_prepull_id         => NULL,                                                      +
                 changes_prepull_id      => NULL,                                                      +
                 in_partitions           => ARRAY[                                                     +
                         $PART$("",)$PART$,                                                            +
                         $PART$("",)$PART$,                                                            +
                         $PART$("",)$PART$,                                                            +
                         $PART$("",)$PART$]::sys_syn.create_in_partition[]                             +
         );
(1 row)

DO $$BEGIN
        EXECUTE sys_syn.in_table_create_sql(
                'user_data.test_table'::regclass,
                'in',
                in_partitions => ARRAY[
                        ('',NULL),
                        ('',NULL),
                        ('',NULL),
                        ('',NULL)]::sys_syn.create_in_partition[]
        );
END$$;
INSERT INTO user_data.test_table(
        test_table_id, test_table_text)
VALUES (1,              'test_data');
INSERT INTO sys_syn.out_groups_def VALUES ('out');
SELECT sys_syn.out_table_create('user_data', 'test_table', 'out');
 out_table_create 
------------------
 
(1 row)

SELECT user_data.test_table_pull(FALSE);
 test_table_pull 
-----------------
 t
(1 row)

SELECT user_data.test_table_out_move_1();
 test_table_out_move_1 
-----------------------
 f
(1 row)

SELECT user_data.test_table_out_move_2();
 test_table_out_move_2 
-----------------------
 f
(1 row)

SELECT user_data.test_table_out_move_3();
 test_table_out_move_3 
-----------------------
 t
(1 row)

SELECT user_data.test_table_out_move_4();
 test_table_out_move_4 
-----------------------
 f
(1 row)

UPDATE user_data.test_table_out_queue_1 SET queue_state = 'Claimed'::sys_syn.queue_state WHERE (id).test_table_id = 1;
UPDATE user_data.test_table_out_queue_2 SET queue_state = 'Claimed'::sys_syn.queue_state WHERE (id).test_table_id = 1;
UPDATE user_data.test_table_out_queue_3 SET queue_state = 'Claimed'::sys_syn.queue_state WHERE (id).test_table_id = 1;
UPDATE user_data.test_table_out_queue_4 SET queue_state = 'Claimed'::sys_syn.queue_state WHERE (id).test_table_id = 1;
UPDATE user_data.test_table_out_queue_1 SET queue_state = 'Processed'::sys_syn.queue_state WHERE (id).test_table_id = 1;
UPDATE user_data.test_table_out_queue_2 SET queue_state = 'Processed'::sys_syn.queue_state WHERE (id).test_table_id = 1;
UPDATE user_data.test_table_out_queue_3 SET queue_state = 'Processed'::sys_syn.queue_state WHERE (id).test_table_id = 1;
UPDATE user_data.test_table_out_queue_4 SET queue_state = 'Processed'::sys_syn.queue_state WHERE (id).test_table_id = 1;
SELECT user_data.test_table_out_processed_1();
 test_table_out_processed_1 
----------------------------
 f
(1 row)

SELECT  out_baseline.id,
        (in_data.id).*,
        (in_data.attributes).*
FROM    user_data.test_table_out_baseline_1 AS out_baseline
        LEFT JOIN user_data.test_table_in_1 AS in_data USING (trans_id_in, id);
 id | test_table_id | test_table_text 
----+---------------+-----------------
(0 rows)

SELECT  out_baseline.id,
        (in_data.id).*,
        (in_data.attributes).*
FROM    user_data.test_table_out_baseline_2 AS out_baseline
        LEFT JOIN user_data.test_table_in_2 AS in_data USING (trans_id_in, id);
 id | test_table_id | test_table_text 
----+---------------+-----------------
(0 rows)

SELECT  out_baseline.id,
        (in_data.id).*,
        (in_data.attributes).*
FROM    user_data.test_table_out_baseline_3 AS out_baseline
        LEFT JOIN user_data.test_table_in_3 AS in_data USING (trans_id_in, id);
 id | test_table_id | test_table_text 
----+---------------+-----------------
(0 rows)

SELECT  out_baseline.id,
        (in_data.id).*,
        (in_data.attributes).*
FROM    user_data.test_table_out_baseline_4 AS out_baseline
        LEFT JOIN user_data.test_table_in_4 AS in_data USING (trans_id_in, id);
 id | test_table_id | test_table_text 
----+---------------+-----------------
(0 rows)

DELETE FROM user_data.test_table WHERE test_table_id = 1;
UPDATE sys_syn.trans_id_mod SET trans_id_mod = trans_id_mod + 1;SET LOCAL sys_syn.trans_id_curr TO 2;
SELECT user_data.test_table_pull(FALSE);
 test_table_pull 
-----------------
 f
(1 row)

SELECT user_data.test_table_out_move_1();
 test_table_out_move_1 
-----------------------
 f
(1 row)

SELECT user_data.test_table_out_move_2();
 test_table_out_move_2 
-----------------------
 f
(1 row)

SELECT user_data.test_table_out_move_3();
 test_table_out_move_3 
-----------------------
 f
(1 row)

SELECT user_data.test_table_out_move_4();
 test_table_out_move_4 
-----------------------
 f
(1 row)

UPDATE user_data.test_table_out_queue_1 SET queue_state = 'Claimed'::sys_syn.queue_state WHERE (id).test_table_id = 1;
UPDATE user_data.test_table_out_queue_2 SET queue_state = 'Claimed'::sys_syn.queue_state WHERE (id).test_table_id = 1;
UPDATE user_data.test_table_out_queue_3 SET queue_state = 'Claimed'::sys_syn.queue_state WHERE (id).test_table_id = 1;
UPDATE user_data.test_table_out_queue_4 SET queue_state = 'Claimed'::sys_syn.queue_state WHERE (id).test_table_id = 1;
UPDATE user_data.test_table_out_queue_1 SET queue_state = 'Processed'::sys_syn.queue_state WHERE (id).test_table_id = 1;
UPDATE user_data.test_table_out_queue_2 SET queue_state = 'Processed'::sys_syn.queue_state WHERE (id).test_table_id = 1;
UPDATE user_data.test_table_out_queue_3 SET queue_state = 'Processed'::sys_syn.queue_state WHERE (id).test_table_id = 1;
UPDATE user_data.test_table_out_queue_4 SET queue_state = 'Processed'::sys_syn.queue_state WHERE (id).test_table_id = 1;
SELECT user_data.test_table_out_processed_1();
 test_table_out_processed_1 
----------------------------
 f
(1 row)

SELECT user_data.test_table_out_processed_2();
 test_table_out_processed_2 
----------------------------
 f
(1 row)

SELECT user_data.test_table_out_processed_3();
 test_table_out_processed_3 
----------------------------
 t
(1 row)

SELECT user_data.test_table_out_processed_4();
 test_table_out_processed_4 
----------------------------
 f
(1 row)

SELECT  out_baseline.id,
        (in_data.id).*,
        (in_data.attributes).*
FROM    user_data.test_table_out_baseline_1 AS out_baseline
        LEFT JOIN user_data.test_table_in_1 in_data USING (trans_id_in, id);
 id | test_table_id | test_table_text 
----+---------------+-----------------
(0 rows)

SELECT  out_baseline.id,
        (in_data.id).*,
        (in_data.attributes).*
FROM    user_data.test_table_out_baseline_2 AS out_baseline
        LEFT JOIN user_data.test_table_in_2 in_data USING (trans_id_in, id);
 id | test_table_id | test_table_text 
----+---------------+-----------------
(0 rows)

SELECT  out_baseline.id,
        (in_data.id).*,
        (in_data.attributes).*
FROM    user_data.test_table_out_baseline_3 AS out_baseline
        LEFT JOIN user_data.test_table_in_3 in_data USING (trans_id_in, id);
 id  | test_table_id | test_table_text 
-----+---------------+-----------------
 (1) |             1 | test_data
(1 row)

SELECT  out_baseline.id,
        (in_data.id).*,
        (in_data.attributes).*
FROM    user_data.test_table_out_baseline_4 AS out_baseline
        LEFT JOIN user_data.test_table_in_4 in_data USING (trans_id_in, id);
 id | test_table_id | test_table_text 
----+---------------+-----------------
(0 rows)

SELECT  in_data.id,
        (in_data.id).*,
        (in_data.attributes).*
FROM    user_data.test_table_in_1 AS in_data;
 id | test_table_id | test_table_text 
----+---------------+-----------------
(0 rows)

SELECT  in_data.id,
        (in_data.id).*,
        (in_data.attributes).*
FROM    user_data.test_table_in_2 AS in_data;
 id | test_table_id | test_table_text 
----+---------------+-----------------
(0 rows)

SELECT  in_data.id,
        (in_data.id).*,
        (in_data.attributes).*
FROM    user_data.test_table_in_3 AS in_data;
 id  | test_table_id | test_table_text 
-----+---------------+-----------------
 (1) |             1 | test_data
(1 row)

SELECT  in_data.id,
        (in_data.id).*,
        (in_data.attributes).*
FROM    user_data.test_table_in_4 AS in_data;
 id | test_table_id | test_table_text 
----+---------------+-----------------
(0 rows)

SELECT user_data.test_table_vacuum_1();
 test_table_vacuum_1 
---------------------
 
(1 row)

SELECT user_data.test_table_vacuum_2();
 test_table_vacuum_2 
---------------------
 
(1 row)

SELECT user_data.test_table_vacuum_3();
 test_table_vacuum_3 
---------------------
 
(1 row)

SELECT user_data.test_table_vacuum_4();
 test_table_vacuum_4 
---------------------
 
(1 row)

SELECT  in_data.id,
        (in_data.id).*,
        (in_data.attributes).*
FROM    user_data.test_table_in_1 AS in_data;
 id | test_table_id | test_table_text 
----+---------------+-----------------
(0 rows)

SELECT  in_data.id,
        (in_data.id).*,
        (in_data.attributes).*
FROM    user_data.test_table_in_2 AS in_data;
 id | test_table_id | test_table_text 
----+---------------+-----------------
(0 rows)

SELECT  in_data.id,
        (in_data.id).*,
        (in_data.attributes).*
FROM    user_data.test_table_in_3 AS in_data;
 id  | test_table_id | test_table_text 
-----+---------------+-----------------
 (1) |             1 | test_data
(1 row)

SELECT  in_data.id,
        (in_data.id).*,
        (in_data.attributes).*
FROM    user_data.test_table_in_4 AS in_data;
 id | test_table_id | test_table_text 
----+---------------+-----------------
(0 rows)

ROLLBACK;
